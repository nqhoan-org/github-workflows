name: Reusable Release-Build

on: 
  workflow_call:
    inputs:
      version:
        description: "Release version"
        default: ""
        type: string
      modules:
        description: "Comma-separated list of projects will be released"
        default: ""
        type: string
      raiseVersion:
        description: "Raise POM version to next release version? (true/false)"
        default: false
        type: boolean
      javaVersion:
        type: number
        default: 21
      mvnVersion:
        type: string
        default: 3.9.8

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v8

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.javaVersion }}
        distribution: temurin
        server-id: github

    - name: Setup Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.mvnVersion }}

    - name: Configure Git
      run: |
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git config user.name "${{ github.actor }}"
        git checkout -b new-release

    - name: Determine project modules
      id: determine-modules
      run: |
        if [ "${{ inputs.modules }}" == "" ]; then
          echo "No modules input provided."
          echo "MODULES=" >> $GITHUB_ENV
        else
          echo "Using provided modules: ${{ inputs.modules }}"
          MODULES=$(echo '${{ inputs.modules }}' | tr ',' ' ')
          echo "MODULES=$MODULES" >> $GITHUB_ENV
        fi

    - name: Determine version
      id: determine-version
      run: |
        if [ "${{ inputs.version }}" == "" ]; then
          echo "No version input provided. Skipping version modification."
          echo "SKIP_VERSION_MODIFICATION=true" >> $GITHUB_ENV
        else
          echo "Using provided version: ${{ inputs.version }}"
          echo "SKIP_VERSION_MODIFICATION=false" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Find all POM files
      id: find-poms
      run: |
        POM_FILES=$(find . -name "pom.xml")
        echo "POM_FILES=$POM_FILES" >> $GITHUB_ENV

    - name: Update POM versions
      if: ${{ env.SKIP_VERSION_MODIFICATION == 'false' }}
      run: |
        echo "Updating version for all POM files in the repository"
        for pom in ${{ env.POM_FILES }}; do
          echo "Updating version in $pom"
          mvn -f "$pom" versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false
        done

    - name: Build with Maven
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -z "${{ env.MODULES }}" ]; then
          echo "Running release for ${{ github.event.repository.name }}"
          mvn --batch-mode -Darguments="-Dmaven.test.skip=true -DaltDeploymentRepository=github::https://maven.pkg.github.com/axonivy-market/${{ github.event.repository.name }}" release:prepare release:perform
        else
          for module in ${{ env.MODULES }}; do
            echo "Running releas for module $module"
            mvn --batch-mode -f "$module/pom.xml" -Darguments="-Dmaven.test.skip=true -DaltDeploymentRepository=github::https://maven.pkg.github.com/axonivy-market/${{ github.event.repository.name }}" release:prepare release:perform
          done
        fi
    - name: Create pull request
      if: ${{ inputs.raiseVersion }}
      uses: repo-sync/pull-request@v2
      with:
        destination_branch: ${{ steps.branch-name.outputs.current_branch }}
        source_branch: new-release
        pr_title: "Release"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pr_assignee: ${{ github.actor }}
