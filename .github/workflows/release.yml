name: Reusable Release-Build

on: 
  workflow_call:
    inputs:
      releaseVersion:
        description: "Release version"
        default: ""
        type: string
      modules:
        description: "Comma-separated list of projects will be released"
        default: ""
        type: string
      raisePullRequest:
        description: "Raise a pull request to update POM version to next release version? (true/false)"
        default: false
        type: boolean
      javaVersion:
        type: number
        default: 21
      mvnVersion:
        type: string
        default: 3.9.8

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v8

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.javaVersion }}
        distribution: temurin
        server-id: github

    - name: Setup Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.mvnVersion }}

    - name: Configure Git
      run: |
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git config user.name "${{ github.actor }}"
        git checkout -b new-release

    - name: Determine project modules
      id: determine-modules
      run: |
        if [ -z "${{ inputs.modules }}" ]; then
          echo "No modules input provided."
          echo "MODULES=" >> $GITHUB_ENV
        else
          echo "Using provided modules: ${{ inputs.modules }}"
          MODULES=$(echo '${{ inputs.modules }}' | tr ',' ' ')
          echo "MODULES=$MODULES" >> $GITHUB_ENV
        fi

    - name: Determine Release Version
      id: determine-version
      run: |
        if [ -z "${{ inputs.releaseVersion }}" ]; then
          # Extract the current version from pom.xml
          CURRENT_VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          RELEASE_VERSION="${CURRENT_VERSION%-SNAPSHOT}"
        else
          RELEASE_VERSION="${{ inputs.releaseVersion }}"
        fi

        echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
        echo "Determined release version: $RELEASE_VERSION"

    - name: Build with Maven
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -z "${{ env.MODULES }}" ]; then
          echo "Running release for all modules in ${{ github.event.repository.name }} repo"
          mvn -f "$module/pom.xml" release:prepare release:perform \
            -Darguments="-Dmaven.test.skip=true \
            -DaltDeploymentRepository=github::https://maven.pkg.github.com/axonivy-market/${{ github.event.repository.name }}" \
            -DreleaseVersion=${{ env.RELEASE_VERSION }} \
            -B
        else
          for module in ${{ env.MODULES }}; do
            echo "Running release for $module project"
            mvn -f "$module/pom.xml" release:prepare release:perform \
              -Darguments="-Dmaven.test.skip=true \
              -DaltDeploymentRepository=github::https://maven.pkg.github.com/axonivy-market/${{ github.event.repository.name }}" \
              -DreleaseVersion=${{ env.RELEASE_VERSION }} \
              -B
          done
        fi

    - name: Create pull request
      if: ${{ inputs.raiseVersion }}
      uses: repo-sync/pull-request@v2
      with:
        destination_branch: ${{ steps.branch-name.outputs.current_branch }}
        source_branch: new-release
        pr_title: "Release"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pr_assignee: ${{ github.actor }}
